{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","state","style","height","position","sm","span","xs","padding","width","top","msTransform","transform","image","imageStyle","description","fontSize","href","FacebookFilled","color","TwitterSquareFilled","LinkedinFilled","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAiDeA,E,kDA3CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAKf,OACA,kBAAC,IAAD,CACIC,MAAO,CAACC,OAAO,QAASC,SAAS,aAErC,kBAAC,IAAD,CAAMC,GAAI,CAACC,KAAK,IAAKC,GAAI,CAACD,KAAK,KAC3B,kBAAC,IAAD,CACIJ,MAAO,CACHE,SAAU,WACVI,QAAQ,KACRC,MAAM,OACNC,IAAK,MACLC,YAAa,mBACbC,UAAW,oBAEfC,MAAM,wBACNC,WACI,CACIL,MAAM,QAGdM,YACI,0BAAMb,MAAO,CAACc,SAAS,SAAvB,2FAKJ,uBAAGC,KAAK,sCAAqC,kBAACC,EAAA,EAAD,CAAgBhB,MAAO,CAACc,SAAS,GAAKG,MAAM,UAAYX,QAAQ,UAC7G,uBAAGS,KAAK,qCAAoC,kBAACG,EAAA,EAAD,CAAqBlB,MAAO,CAACc,SAAS,GAAKG,MAAM,WAAaX,QAAQ,UAClH,uBAAGS,KAAK,4CAA2C,kBAACI,EAAA,EAAD,CAAgBnB,MAAO,CAACc,SAAS,GAAKG,MAAM,UAAYX,QAAQ,UACnH,yBAAKN,MAAO,CAACc,SAAS,SAAtB,8BAA0D,6BAA1D,0BAAsF,uBAAGC,KAAK,kCAAR,IAA0C,+D,GAnC7HK,aCQJC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b35a5955.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Empty, Row , Col } from 'antd';\r\nimport {FacebookFilled , TwitterSquareFilled , LinkedinFilled} from '@ant-design/icons'\r\n\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return ( \r\n        <Row \r\n            style={{height:\"100vh\", position:\"relative\"}} \r\n        >\r\n        <Col  sm={{span:24}} xs={{span:24}}>\r\n            <Empty\r\n                style={{\r\n                    position: \"absolute\",\r\n                    padding:\"3%\",\r\n                    width:\"100%\",\r\n                    top: \"50%\",\r\n                    msTransform: \"translateY(-50%)\",\r\n                    transform: \"translateY(-50%)\"\r\n                }}\r\n                image=\"underconstruction.png\"\r\n                imageStyle={\r\n                    {  \r\n                        width:\"100%\"\r\n                    }\r\n                }\r\n                description={\r\n                    <span style={{fontSize:\"16px\"}}>\r\n                        Hey! Thank you for coming in. I'm building this page effectively. Let's get connected!\r\n                    </span>\r\n                }\r\n            >\r\n                <a href=\"https://www.facebook.com/umair2288\"><FacebookFilled style={{fontSize:36 , color:\"#3b5998\" , padding:\"5px\"}}/></a>\r\n                <a href=\"https://www.twitter.com/umair_urc\"><TwitterSquareFilled style={{fontSize:36 , color:\"#00acee \" , padding:\"5px\"}}/></a>\r\n                <a href=\"https://www.linkedin.com/in/umairramzan/\"><LinkedinFilled style={{fontSize:36 , color:\"#0e76a8\" , padding:\"5px\"}}/></a>\r\n                <div style={{fontSize:\"14px\"}}>Not a social media person? <br/> No problem mail me on <a href=\"mailto:info@umairramzan.online\"> <i>info@umairramzan.online</i></a></div>\r\n                    \r\n            </Empty> \r\n            </Col>\r\n        </Row>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Main;","import React from 'react';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}